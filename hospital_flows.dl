// -----------------------------
// SECTION 1: Data Input (EDB) with Provenance IDs
// -----------------------------

// Each fact now has an ID column for provenance tracking
.decl Node(id: symbol, node: symbol, type: symbol)
.input Node(filename="watts_nodes.facts", delimiter="\t")

.decl Edge(id: symbol, from: symbol, to: symbol, interaction: symbol)
.input Edge(filename="watts_edges.facts", delimiter="\t")

.decl SensitiveType(id: symbol, n: symbol, tag: symbol)
.input SensitiveType(filename="watts_sensitive.facts", delimiter="\t")

// Derived sensitive nodes with provenance IDs
.decl Sensitive(id: symbol, n: symbol)
Sensitive(cat("SensFromType[", id, "]"), n) :-
    SensitiveType(id, n, "pii_compound").
Sensitive(cat("SensFromType[", id, "]"), n) :-
    SensitiveType(id, n, "drug_target").

// -----------------------------
// SECTION 2: Reachability (manual provenance)
// -----------------------------

.decl Reach(id: symbol, from: symbol, to: symbol)

// Base case: direct edge
Reach(cat("Reach[", eId, "]"), x, y) :-
    Edge(eId, x, y, _),
    x != y.

// Recursive case: chain two reaches
Reach(cat("Reach[", id1, ",", id2, "]"), x, z) :-
    Reach(id1, x, y),
    Edge(id2, y, z, _),
    x != z, y != z, x != y.

// ReachPath now also stores provenance ID
.decl ReachPath(id: symbol, from: symbol, to: symbol, path_str: symbol, visited: symbol)
.output ReachPath(filename="reach_paths.tsv", delimiter="\t")

// Base case
ReachPath(cat("ReachPath[", eId, "]"), x, y, cat(x, "->", y), cat(",", x, ",", y, ",")) :-
    Edge(eId, x, y, _),
    x != y.

// Recursive case
ReachPath(cat("ReachPath[", id1, ",", eId, "]"), x, z, cat(path_str, "->", z), cat(visited, z, ",")) :-
    ReachPath(id1, x, y, path_str, visited),
    Edge(eId, y, z, _),
    !contains(visited, cat(",", z, ",")),
    x != z, y != z, x != y.

// Debug relation for a specific query (example)
.decl DebugReachPath(id: symbol, from: symbol, to: symbol, path_str: symbol, visited: symbol)
DebugReachPath(id, x, y, p, v) :-
    ReachPath(id, x, y, p, v),
    x = "Chorismate",
    y = "Melatonin".

// -----------------------------
// SECTION 3: Node classifications (manual provenance IDs)
// -----------------------------

.decl Source(id: symbol, node: symbol)
Source(cat("Source[", nId, "]"), n) :- Node(nId, n, "source").

.decl Sink(id: symbol, node: symbol)
Sink(cat("Sink[", nId, "]"), n) :- Node(nId, n, "sink").

.decl Sanitizer(id: symbol, node: symbol)
Sanitizer(cat("Sanitizer[", nId, "]"), n) :- Node(nId, n, "sanitizer").

// -----------------------------
// SECTION 4: Path Queries
// -----------------------------

.decl CompletePath(id: symbol, source: symbol, sink: symbol)
CompletePath(cat("Complete[", sId, ",", tId, ",", rId, "]"), s, t) :-
    Source(sId, s), Sink(tId, t), Reach(rId, s, t).

.decl SanitizedPath(id: symbol, source: symbol, sink: symbol, sanitizer: symbol)
SanitizedPath(cat("Sanitized[", cId, ",", zId, ",", r1Id, ",", r2Id, "]"), s, t, z) :-
    CompletePath(cId, s, t),
    Sanitizer(zId, z),
    Reach(r1Id, s, z),
    Reach(r2Id, z, t).

.decl SensitiveOnPath(id: symbol, source: symbol, sink: symbol, node: symbol)
SensitiveOnPath(cat("SensitiveOnPath[", cId, ",", sensId, ",", r1Id, ",", r2Id, "]"), s, t, n) :-
    CompletePath(cId, s, t),
    Reach(r1Id, s, n),
    Reach(r2Id, n, t),
    Sensitive(sensId, n).

.decl SanitizerBeforeSensitive(id: symbol, source: symbol, sink: symbol, sensitive: symbol)
SanitizerBeforeSensitive(cat("SanBeforeSens[", cId, ",", sensId, ",", zId, ",", r1Id, ",", r2Id, ",", r3Id, "]"), s, t, n) :-
    CompletePath(cId, s, t),
    Sensitive(sensId, n),
    Sanitizer(zId, z),
    Reach(r1Id, s, z),
    Reach(r2Id, z, n),
    Reach(r3Id, n, t).

.decl UnsanitizedPath(id: symbol, source: symbol, sink: symbol, reason: symbol)
UnsanitizedPath(cat("Unsanitized[", sopId, "]"), s, t, "no_sanitizer") :-
    SensitiveOnPath(sopId, s, t, n),
    !SanitizerBeforeSensitive(_, s, t, n).

// -----------------------------
// SECTION 5: Outputs
// -----------------------------

.decl PathSummary(id: symbol, source: symbol, sink: symbol, sanitizer: symbol, type: symbol)
.output PathSummary(filename="path_summary.tsv", delimiter="\t")

PathSummary(cat("CompleteSummary[", id, "]"), s, t, "-", "complete") :-
    CompletePath(id, s, t).

PathSummary(cat("SanitizedSummary[", id, "]"), s, t, z, "sanitized") :-
    SanitizedPath(id, s, t, z).

PathSummary(cat("UnsanitizedSummary[", id, "]"), s, t, "-", "unsanitized") :-
    UnsanitizedPath(id, s, t, _).
